// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ClincDbContext))]
    [Migration("20250628164020_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Data.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Allergies")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCountry")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChronicDiseases")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrentCountry")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMedications")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyDiseases")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasDigestiveIssues")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasNeurologicalIssues")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRespiratoryIssues")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasUrinaryOrReproductiveIssues")
                        .HasColumnType("bit");

                    b.Property<string>("InfectiousDiseases")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastVaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaritalStatus")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalSpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("MentalHealthIssues")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastSurgeries")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousTestsResults")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PsychiatricMedications")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiptSent")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptToken")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedTreatment")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrStudyPlace")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("DAL.Data.Models.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerImage")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerTitle")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.ToTable("CustomerReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerName = "أحمد محمد",
                            CustomerTitle = "مريض",
                            IsApproved = true,
                            IsVisible = true,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 6, 14, 19, 40, 19, 391, DateTimeKind.Local).AddTicks(1595),
                            ReviewText = "خدمة ممتازة ومتابعة دقيقة من الدكتور. استفدت كثيراً من برنامج التغذية العلاجية وحققت نتائج رائعة."
                        },
                        new
                        {
                            Id = 2,
                            CustomerName = "فاطمة علي",
                            CustomerTitle = "مريضة",
                            IsApproved = true,
                            IsVisible = true,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 5, 28, 19, 40, 19, 391, DateTimeKind.Local).AddTicks(1636),
                            ReviewText = "أشكر الدكتور على الاهتمام والمتابعة المستمرة. العلاج النفسي ساعدني كثيراً في تحسين حالتي."
                        },
                        new
                        {
                            Id = 3,
                            CustomerName = "محمد سالم",
                            CustomerTitle = "مريض",
                            IsApproved = true,
                            IsVisible = true,
                            Rating = 4,
                            ReviewDate = new DateTime(2025, 6, 7, 19, 40, 19, 391, DateTimeKind.Local).AddTicks(1641),
                            ReviewText = "تجربة جيدة جداً مع العيادة. الطاقم الطبي محترف والخدمة سريعة ومنظمة."
                        });
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateFilePath")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificatesAndCourses")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalDegree")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduationCertificatePath")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTermsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseFilePath")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorJoinRequests");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorJoinRequestId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalSpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorJoinRequestId", "MedicalSpecialtyId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("DAL.Data.Models.MedicalSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisibleToPatient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "خطط غذائية متخصصة وعلاج اضطرابات التغذية",
                            IconClass = "🥗",
                            IsVisibleToPatient = true,
                            Name = "التغذية العلاجية",
                            Price = 30m
                        },
                        new
                        {
                            Id = 2,
                            Description = "استشارات جراحية متقدمة وتقييم الحالات",
                            IconClass = "⚕️",
                            IsVisibleToPatient = true,
                            Name = "الجراحة العامة",
                            Price = 50m
                        },
                        new
                        {
                            Id = 3,
                            Description = "علاج الاضطرابات النفسية والدعم النفسي",
                            IconClass = "🧠",
                            IsVisibleToPatient = true,
                            Name = "الطب النفسي",
                            Price = 40m
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "❤️",
                            IsVisibleToPatient = false,
                            Name = "أمراض القلب"
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "🩺",
                            IsVisibleToPatient = false,
                            Name = "الأمراض الجلدية"
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "👶",
                            IsVisibleToPatient = false,
                            Name = "طب الأطفال"
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "🦴",
                            IsVisibleToPatient = false,
                            Name = "العظام"
                        },
                        new
                        {
                            Id = 8,
                            IconClass = "🧠",
                            IsVisibleToPatient = false,
                            Name = "الأعصاب"
                        },
                        new
                        {
                            Id = 9,
                            IconClass = "🏥",
                            IsVisibleToPatient = false,
                            Name = "تخصص آخر"
                        });
                });

            modelBuilder.Entity("DAL.Data.Models.Partnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullPhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("PartnershipDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PartnershipType")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreferredContactMethod")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ProposedBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceSource")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServicesOffered")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Partnerships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyAddress = "الرياض، المملكة العربية السعودية",
                            CompanyName = "مستشفى الأمل التخصصي",
                            ContactPersonName = "د. خالد محمود",
                            Email = "khalid.mahmoud@alamalhospital.com",
                            FullPhoneNumber = "+966501234567",
                            IsUrgent = false,
                            PartnershipDetails = "نبحث عن شراكة لتقديم خدمات استشارية في التغذية العلاجية لمرضانا.",
                            PartnershipType = "شراكة طبية",
                            PhoneNumber = "+966501234567",
                            Position = "مدير المستشفى",
                            Status = 1,
                            SubmissionDate = new DateTime(2025, 4, 28, 19, 40, 19, 391, DateTimeKind.Local).AddTicks(1673)
                        },
                        new
                        {
                            Id = 2,
                            CompanyAddress = "جدة، المملكة العربية السعودية",
                            CompanyName = "شركة الإبداع للتسويق",
                            ContactPersonName = "ليلى فهد",
                            Email = "layla.fahad@alibdaa.com",
                            FullPhoneNumber = "+966557654321",
                            IsUrgent = false,
                            PartnershipDetails = "نرغب في إطلاق حملة إعلانية مشتركة لزيادة الوعي بالخدمات الطبية.",
                            PartnershipType = "شراكة إعلانية",
                            PhoneNumber = "+966557654321",
                            Position = "مدير التسويق",
                            Status = 0,
                            SubmissionDate = new DateTime(2025, 5, 28, 19, 40, 19, 391, DateTimeKind.Local).AddTicks(1678)
                        });
                });

            modelBuilder.Entity("DAL.Data.Models.Consultation", b =>
                {
                    b.HasOne("DAL.Data.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Consultations")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("DAL.Data.Models.CustomerReview", b =>
                {
                    b.HasOne("DAL.Data.Models.Consultation", "Consultation")
                        .WithMany("Reviews")
                        .HasForeignKey("ConsultationId");

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("DAL.Data.Models.DoctorJoinRequest", "DoctorJoinRequest")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorJoinRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Data.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorJoinRequest");

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("DAL.Data.Models.Consultation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorJoinRequest", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("DAL.Data.Models.MedicalSpecialty", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("DoctorSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
